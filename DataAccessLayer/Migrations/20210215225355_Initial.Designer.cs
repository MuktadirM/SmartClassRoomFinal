// <auto-generated />
using System;
using DataAccessLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20210215225355_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("SmartClassRoom.Domain.Models.AttendanceProcessing.AttendProcess", b =>
                {
                    b.Property<int>("AttendProcessId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.HasKey("AttendProcessId");

                    b.ToTable("AttendenceHistories", "Admin");
                });

            modelBuilder.Entity("SmartClassRoom.Domain.Models.AttendanceProcessing.Attendance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AttendProcessId")
                        .HasColumnType("int");

                    b.Property<int>("AttendanceType")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("LecturerId")
                        .HasColumnType("int");

                    b.Property<int?>("RegistrationId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AttendProcessId");

                    b.HasIndex("CourseId");

                    b.HasIndex("RegistrationId");

                    b.ToTable("Attendances", "Lecturer");
                });

            modelBuilder.Entity("SmartClassRoom.Domain.Models.Core.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CourseCode")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("CourseName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Faculty")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Sem")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Courses", "Admin");
                });

            modelBuilder.Entity("SmartClassRoom.Domain.Models.Core.Registration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Intake")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.HasIndex("StudentId");

                    b.ToTable("Registrations", "Admin");
                });

            modelBuilder.Entity("SmartClassRoom.Domain.Models.Core.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LecturerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("LecturerId");

                    b.ToTable("Sections", "Admin");
                });

            modelBuilder.Entity("SmartClassRoom.Domain.Models.Core.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("FaceAdded")
                        .HasColumnType("bit");

                    b.Property<string>("Faculty")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long>("Matric")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Sem")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Students", "Admin");
                });

            modelBuilder.Entity("SmartClassRoom.Domain.Models.Core.StudentAddress", b =>
                {
                    b.Property<int>("StudentAddressId")
                        .HasColumnType("int");

                    b.Property<string>("Address1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Zipcode")
                        .HasColumnType("int");

                    b.HasKey("StudentAddressId");

                    b.ToTable("StudentAddresses", "Admin");
                });

            modelBuilder.Entity("SmartClassRoom.Domain.Models.Core.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Type")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Users", "Admin");
                });

            modelBuilder.Entity("SmartClassRoom.Domain.Models.FaceProcessing.StorageInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentFaceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentFaceId");

                    b.ToTable("StorageInfo", "Student");
                });

            modelBuilder.Entity("SmartClassRoom.Domain.Models.FaceProcessing.StudentFaceData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ContainerName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("GroupId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("GroupName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTrained")
                        .HasColumnType("bit");

                    b.Property<int>("NumberOfImage")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.Property<int>("StudentFaceDataId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentFaceDataId");

                    b.ToTable("StudentFaces", "Admin");
                });

            modelBuilder.Entity("SmartClassRoom.Domain.Models.Users.Lecturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Faculty")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Lecturers", "Admin");
                });

            modelBuilder.Entity("SmartClassRoom.Domain.Models.AttendanceProcessing.AttendProcess", b =>
                {
                    b.HasOne("SmartClassRoom.Domain.Models.Core.Section", "Section")
                        .WithOne("AttendProcess")
                        .HasForeignKey("SmartClassRoom.Domain.Models.AttendanceProcessing.AttendProcess", "AttendProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Section");
                });

            modelBuilder.Entity("SmartClassRoom.Domain.Models.AttendanceProcessing.Attendance", b =>
                {
                    b.HasOne("SmartClassRoom.Domain.Models.AttendanceProcessing.AttendProcess", "AttendProcess")
                        .WithMany("Attendances")
                        .HasForeignKey("AttendProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartClassRoom.Domain.Models.Core.Course", null)
                        .WithMany("Attendances")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartClassRoom.Domain.Models.Core.Registration", "Registration")
                        .WithMany("Attendances")
                        .HasForeignKey("RegistrationId");

                    b.Navigation("AttendProcess");

                    b.Navigation("Registration");
                });

            modelBuilder.Entity("SmartClassRoom.Domain.Models.Core.Registration", b =>
                {
                    b.HasOne("SmartClassRoom.Domain.Models.Core.Section", "Section")
                        .WithMany("Registration")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartClassRoom.Domain.Models.Core.Student", "Student")
                        .WithMany("Registrations")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Section");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SmartClassRoom.Domain.Models.Core.Section", b =>
                {
                    b.HasOne("SmartClassRoom.Domain.Models.Core.Course", "Course")
                        .WithMany("Sections")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartClassRoom.Domain.Models.Users.Lecturer", "Lecturer")
                        .WithMany("Sections")
                        .HasForeignKey("LecturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Lecturer");
                });

            modelBuilder.Entity("SmartClassRoom.Domain.Models.Core.StudentAddress", b =>
                {
                    b.HasOne("SmartClassRoom.Domain.Models.Core.Student", "Student")
                        .WithOne("Address")
                        .HasForeignKey("SmartClassRoom.Domain.Models.Core.StudentAddress", "StudentAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SmartClassRoom.Domain.Models.FaceProcessing.StorageInfo", b =>
                {
                    b.HasOne("SmartClassRoom.Domain.Models.FaceProcessing.StudentFaceData", "StudentFace")
                        .WithMany("StorageInfos")
                        .HasForeignKey("StudentFaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StudentFace");
                });

            modelBuilder.Entity("SmartClassRoom.Domain.Models.FaceProcessing.StudentFaceData", b =>
                {
                    b.HasOne("SmartClassRoom.Domain.Models.Core.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentFaceDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SmartClassRoom.Domain.Models.Users.Lecturer", b =>
                {
                    b.HasOne("SmartClassRoom.Domain.Models.Core.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartClassRoom.Domain.Models.AttendanceProcessing.AttendProcess", b =>
                {
                    b.Navigation("Attendances");
                });

            modelBuilder.Entity("SmartClassRoom.Domain.Models.Core.Course", b =>
                {
                    b.Navigation("Attendances");

                    b.Navigation("Sections");
                });

            modelBuilder.Entity("SmartClassRoom.Domain.Models.Core.Registration", b =>
                {
                    b.Navigation("Attendances");
                });

            modelBuilder.Entity("SmartClassRoom.Domain.Models.Core.Section", b =>
                {
                    b.Navigation("AttendProcess");

                    b.Navigation("Registration");
                });

            modelBuilder.Entity("SmartClassRoom.Domain.Models.Core.Student", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Registrations");
                });

            modelBuilder.Entity("SmartClassRoom.Domain.Models.FaceProcessing.StudentFaceData", b =>
                {
                    b.Navigation("StorageInfos");
                });

            modelBuilder.Entity("SmartClassRoom.Domain.Models.Users.Lecturer", b =>
                {
                    b.Navigation("Sections");
                });
#pragma warning restore 612, 618
        }
    }
}
