<UserControl x:Class="Presentation.WPF.Controls.CustomMenu.CustomRadioButton"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:Presentation.WPF.Controls.CustomMenu"
             mc:Ignorable="d" x:Name="this" Background="White">

    <UserControl.Resources>
        
        <!--#region Menu Text Style-->
        <Style x:Key="MenuTextStyle" TargetType="{x:Type TextBlock}">

            <Setter Property="Foreground" Value="Black"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="HorizontalAlignment" Value="Center"/>
            <Setter Property="FontSize" Value="12"/>
            <Setter Property="FontWeight" Value="Normal"/>
            <Setter Property="FontFamily" Value="Segoe UI Semibold"/>
            <Setter Property="Margin" Value="10,0,10,0"/>

            <!--to change foreground on MouseOver and Menu item Selection-->

            <Style.Triggers>
                <DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ToggleButton}}" Value="True">
                    <Setter Property="Foreground" Value="White"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding IsChecked, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ToggleButton}}" Value="True">
                    <Setter Property="Foreground" Value="White"/>
                </DataTrigger>
            </Style.Triggers>

        </Style>
        <!--#endregion-->

        <Style x:Key="MenuButtonStyle" TargetType="{x:Type ToggleButton}">
            <Setter Property="Height" Value="48"/>
            <Setter Property="HorizontalAlignment" Value="Stretch"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="Background" Value="WhiteSmoke"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{Binding Padding, ElementName=this}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <!--Column for Text-->
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>

                                <!--the Fallbackvalue is used when the binding path is not correct or null so we can set default value to use instead of that in case.. like we are using default icon here.. and so does happen with Targetnullvalue.. when there is no value provided from source our binding will use default value-->
                                <TextBlock Style="{StaticResource MenuTextStyle}" Grid.Column="0" Text="{Binding Text, ElementName=this, FallbackValue=MenuText, TargetNullValue=MenuText}"/>

                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <!--Trigger to set our toggle button as checked on MainWindow Startup-->
                            <DataTrigger Binding="{Binding IsSelected, ElementName=this}" Value="True">
                                <Setter Property="IsChecked" Value="True"/>
                                <Setter Property="Background" Value="{StaticResource BrushPrimary}"/>
                            </DataTrigger>
                            <!--Trigger to set our toggle button mouse over color -->
                            <DataTrigger Binding="{Binding IsMouseOver, ElementName=this}" Value="True">
                                <Setter Property="Background" Value="{StaticResource BrushPrimary}"/>
                            </DataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

        </Style>
    </UserControl.Resources>
    
    <!--now since we have radio button, there is a property "GroupName" which we can use for our benefit here..-->
    <RadioButton Command ="{Binding Path=Command, ElementName=this}" CommandParameter="{Binding Path=CommandParameter, ElementName=this}"  Style="{StaticResource MenuButtonStyle}" GroupName="{Binding GroupName, ElementName=this}" IsChecked ="{Binding Path=IsSelected,Mode=TwoWay,ElementName=this}"/>
</UserControl>
